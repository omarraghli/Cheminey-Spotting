/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ma.eurogate.dailyyardunitposition.vues;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.xml.parsers.ParserConfigurationException;
import ma.eurogate.dailyyardunitposition.DAO.DailyYardUnitPositionDAO;
import ma.eurogate.dailyyardunitposition.Entities.YardPositions;
import ma.eurogate.dailyyardunitposition.Exceptions.NoLogIdsChemineesFoundException;
import org.xml.sax.SAXException;
/**
 *
 * @author Omar
 */
public class UI extends javax.swing.JFrame {
    String Date="";
    /**
     * Creates new form UI
     */
    public UI() {
        initComponents();
        Annee.addKeyListener(new KeyAdapter() {
    @Override
    public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
                e.consume();  // ignorer l'événement
            }
        }
    });
    
   
    Mois.addKeyListener(new KeyAdapter() {
        @Override
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
                e.consume();  // ignorer l'événement
            }
        }
    });

   
    Jour.addKeyListener(new KeyAdapter() {
        @Override
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
                e.consume();  // ignorer l'événement
            }
        }
    });

   
    Heur.addKeyListener(new KeyAdapter() {
        @Override
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
                e.consume();  // ignorer l'événement
            }
        }
    });

   
    Minute.addKeyListener(new KeyAdapter() {
        @Override
        public void keyTyped(KeyEvent e) {
            char c = e.getKeyChar();
            if ( ((c < '0') || (c > '9')) && (c != KeyEvent.VK_BACK_SPACE)) {
                e.consume();  // ignorer l'événement
            }
        }
    });
    
    
    Jour.addKeyListener(new KeyAdapter() {
        @Override
        public void keyTyped(KeyEvent e) { 
            if (Jour.getText().length() >= 2 ) // limit textfield to 2 characters
                e.consume(); 
        }  
        });
    Mois.addKeyListener(new KeyAdapter() {
        @Override
        public void keyTyped(KeyEvent e) { 
            if (Mois.getText().length() >= 2 ) // limit textfield to 2 characters
                e.consume(); 
        }  
        });
    Heur.addKeyListener(new KeyAdapter() {
        @Override
        public void keyTyped(KeyEvent e) { 
            if (Heur.getText().length() >= 2 ) // limit textfield to 2 characters
                e.consume(); 
        }  
    });
    Minute.addKeyListener(new KeyAdapter() {
        @Override
        public void keyTyped(KeyEvent e) { 
            if (Minute.getText().length() >= 2 ) // limit textfield to 2 characters
                e.consume(); 
        }  
        });
    Annee.addKeyListener(new KeyAdapter() {
        @Override
        public void keyTyped(KeyEvent e) { 
            if (Annee.getText().length() >= 4 ) // limit textfield to 4 characters
                e.consume(); 
        }  
        });
    this.setTitle("Reperage Cheminées");
    
    this.pack();
    this.setDefaultLookAndFeelDecorated(true);
    this.setExtendedState(this.MAXIMIZED_BOTH);
    ErrorMsg.setHorizontalAlignment(SwingConstants.CENTER);
    txtlbl.setHorizontalAlignment(SwingConstants.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ErrorMsg = new javax.swing.JLabel();
        GoButton = new javax.swing.JButton();
        Mois = new javax.swing.JTextField();
        Jour = new javax.swing.JTextField();
        Annee = new javax.swing.JTextField();
        Heur = new javax.swing.JTextField();
        Minute = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtlbl = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AllCheminey = new javax.swing.JTable();
        DownloadExelFile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        GoButton.setText("Chercher!");
        GoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoButtonActionPerformed(evt);
            }
        });

        Mois.setToolTipText("");

        Annee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnneeActionPerformed(evt);
            }
        });

        Minute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MinuteActionPerformed(evt);
            }
        });

        jLabel1.setText("/");

        jLabel2.setText("/");

        jLabel3.setText(":");

        txtlbl.setText("Entrez la date sous le format suivant: (YYYY/MM/DD HH/MM)");

        AllCheminey.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "log_id", "ShiftDate", "ShiftCode", "event_datetime", "hdhand", "unit", "Park", "Bay", "Row", "Tier", "size", "isFull", "IsDangerous", "IsOOG", "isReefer", "IsReeferActivated"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(AllCheminey);
        if (AllCheminey.getColumnModel().getColumnCount() > 0) {
            AllCheminey.getColumnModel().getColumn(1).setPreferredWidth(100);
            AllCheminey.getColumnModel().getColumn(3).setPreferredWidth(100);
            AllCheminey.getColumnModel().getColumn(6).setPreferredWidth(40);
            AllCheminey.getColumnModel().getColumn(7).setPreferredWidth(40);
            AllCheminey.getColumnModel().getColumn(8).setPreferredWidth(40);
            AllCheminey.getColumnModel().getColumn(11).setPreferredWidth(40);
            AllCheminey.getColumnModel().getColumn(13).setPreferredWidth(40);
            AllCheminey.getColumnModel().getColumn(14).setPreferredWidth(40);
        }

        DownloadExelFile.setText("Télécharger un fichier Exel");
        DownloadExelFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DownloadExelFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(370, 370, 370)
                        .addComponent(txtlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(340, 340, 340)
                        .addComponent(Annee, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(Mois, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(Jour, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addComponent(Heur, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(Minute, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(GoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(DownloadExelFile, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addComponent(ErrorMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 870, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1350, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(txtlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(Annee, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(Mois, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(Jour, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(Heur, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(Minute, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(GoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(DownloadExelFile, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(10, 10, 10)
                .addComponent(ErrorMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoButtonActionPerformed
        try {
            DailyYardUnitPositionDAO a = new DailyYardUnitPositionDAO();
            clear();
            if(Annee.getText().equals("")&& Mois.getText().equals("") && Jour.getText().equals("") && Heur.getText().equals("") && Minute.getText().equals("")){
                ErrorMsg.setText("");
                LoadData(a.getTodayCheminees());
            }
            else{
                String Year =Annee.getText();
                String Month =Mois.getText();
                String Day =Jour.getText();
                String Hour =Heur.getText();
                String Minutes =Minute.getText();
                Date = Year+Month+Day+" "+Hour+":"+Minutes;
                ErrorMsg.setText("");
                LoadData(a.getCheminees(Date));
            }
        }
        catch (SQLException ex) {
            ErrorMsg.setText("Erreur! Verrifiez que vous avez saisi la bonne date sous le format suivant: YYYY/MM/DD HH:MM");
        }
        catch(NoLogIdsChemineesFoundException ex){
            ErrorMsg.setText(ex.getMessage());
        }
        catch(StringIndexOutOfBoundsException ex){
            ErrorMsg.setText("Remplissez tout les champs ou laissez les vide");
        }
        catch (ParserConfigurationException | SAXException | IOException ex) {
        ErrorMsg.setText("Erreur de récupération des coordonnées de la base de données du coté du fichier XML");
        }  

    }//GEN-LAST:event_GoButtonActionPerformed

    private void AnneeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnneeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AnneeActionPerformed

    private void MinuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MinuteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MinuteActionPerformed

    private void DownloadExelFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownloadExelFileActionPerformed
        if(AllCheminey.getRowCount()>0){
            JFileChooser fchoose = new JFileChooser();
            int option = fchoose.showSaveDialog(this);
            if(option == JFileChooser.APPROVE_OPTION){
                try {
                    String name = fchoose.getSelectedFile().getName();
                    String path = fchoose.getSelectedFile().getParentFile().getPath();
                    String file = path + "\\" + name + ".xls";
                    export(AllCheminey, new File(file));
                }
                catch (IOException ex) {
                    ErrorMsg.setText("Error dans l'export du fichier");
                }
            }
        }
        else{
            ErrorMsg.setText("Cherchez des cheminées d'abord");
        }
    }//GEN-LAST:event_DownloadExelFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AllCheminey;
    private javax.swing.JTextField Annee;
    private javax.swing.JButton DownloadExelFile;
    private javax.swing.JLabel ErrorMsg;
    private javax.swing.JButton GoButton;
    private javax.swing.JTextField Heur;
    private javax.swing.JTextField Jour;
    private javax.swing.JTextField Minute;
    private javax.swing.JTextField Mois;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel txtlbl;
    // End of variables declaration//GEN-END:variables
public void LoadData(ArrayList <YardPositions> data){
        DecimalFormat df = new DecimalFormat("0.##");
        DefaultTableModel model = (DefaultTableModel) AllCheminey.getModel();
        data.forEach(element -> {
            model.addRow(new Object[]{
                df.format(element.getLog_id()),
                element.getShiftDate(),
                element.getShiftCode(),
                element.getEvent_datetime(),
                df.format(element.getHdhand()),
                element.getUnit(),
                element.getPark(),
                element.getBay(),
                element.getRow(),
                element.getTier(),
                element.getSize(),
                element.getIsFull(),
                element.getIsDangerous(),
                element.getIsOOG(),
                element.getIsReefer(),
                element.getIsReeferActivated(),
            });
        });
    }
    public void clear(){
        DefaultTableModel model = (DefaultTableModel) AllCheminey.getModel();
        for(int i = model.getRowCount(); i > 0; --i)
        model.removeRow(i-1);     
    }
    
    public void export(JTable table, File file) throws IOException{
        TableModel model = table.getModel();
        FileWriter fw = new FileWriter(file);

       
            for(int i = 0; i < model.getColumnCount(); i++){
                fw.write(model.getColumnName(i) + "\t");
            }
            fw.write("\n");
            for(int i=0; i < model.getRowCount(); i++) {
                for(int j=0; j < model.getColumnCount(); j++) {
                    if(model.getValueAt(i,j)==null){
                        fw.write("NULL\t");
                    }
                    else{
                    fw.write(model.getValueAt(i,j).toString()+"\t");
                    }
                }
                fw.write("\n");
            }
            fw.close();
        
    }

}
